데이터 포맷 (Data Format)
데이터 포맷이란 데이터를 저장하거나 전송할 때 사용할 형식을 의미
데이터를 저장하거나, 네트워크를 이용해서 데이터를 전송할 때 데이터의 체계를 저장하기 위해서 데이터 포맷이 필요

1. 데이터 저장 방식
(1) 파일로 저장
프로그램에서 모든 데이터는 변수에 저장되지만, 프로그램이 종료되면 변수가 사라짐
데이터를 영구적으로 보관하기 위해 파일로 저장해야 함
데이터를 저장할 포맷을 결정하는 것이 중요함

(2) 네트워크를 이용한 전송
데이터를 다른 시스템으로 전송하기 위해서는 특정한 형식이 필요함
데이터를 어떻게 포맷팅할 것인가가 중요함


2. 데이터 포맷의 종류
(1) 텍스트 형식 (Text)
장점
- 사람이 쉽게 읽을 수 있음
- 플랫폼에 독립적이므로 호환성이 높음
- 확장성이 좋음 (다양한 애플리케이션에서 활용 가능)

문제점
- 용량이 큼 (데이터를 사람이 읽을 수 있도록 저장하기 때문에 불필요한 공백이나 추가 정보가 포함될 수 있음)
- 처리 속도가 느림 (파싱 과정이 필요)

예시)
CSV (Comma-Separated Values)
JSON (JavaScript Object Notation)
XML (eXtensible Markup Language)
YAML (Yet Another Markup Language)

(2) 바이너리 형식 (Binary)
장점
- 데이터 크기가 작아 저장 및 전송 속도가 빠름
- 구조화된 데이터 저장이 가능하여 효율적임

문제점
- 사람이 읽을 수 없음
- 플랫폼에 따라 데이터 포맷이 다를 수 있음 (플랫폼 종속적)

예시)
이미지 파일 (JPG, PNG, GIF)
오디오 파일 (MP3, WAV)
동영상 파일 (MP4, AVI)
직렬화된 데이터 (Pickle, Protocol Buffers, Avro)


3. 주요 차이점
사람이 읽을 수 있는가?
- 텍스트 형식 → 사람이 직접 읽고 이해 가능
- 바이너리 형식 → 사람이 직접 읽을 수 없음

호환성
- 텍스트 형식 → 플랫폼 독립적, 다양한 환경에서 사용 가능
- 바이너리 형식 → 플랫폼에 따라 차이가 있을 수 있음

성능
- 텍스트 형식 → 크기가 커서 속도가 느릴 수 있음
- 바이너리 형식 → 크기가 작아 빠르게 처리 가능


4. 선택 기준
- 사람이 직접 데이터를 확인해야 하는 경우 → 텍스트 형식이 적합
- 데이터 크기 및 속도가 중요한 경우 → 바이너리 형식이 유리

실무 예시)
JSON, XML → 네트워크 API, 데이터 저장
CSV → 데이터 교환, 스프레드시트
Binary (Pickle, Protobuf) → 고속 데이터 처리, 머신러닝 모델 저장


